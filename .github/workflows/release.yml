name: release

on:
  push:
    tags:
      - "*"

jobs:
  create_release:
    name: Create_Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.step_upload_url.outputs.upload_url }}
    steps:
      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
      - id: step_upload_url
        run: echo "::set-output name=upload_url::${{ steps.create_release.outputs.upload_url }}"

  Tauri:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    defaults:
      run:
        working-directory: "Regard"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      
      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      
      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'npm' # Set this to npm, yarn or pnpm.
          cache-dependency-path: Regard/package-lock.json

      - name: Install app dependencies and build web
        run: npm install && npm run build # Change this to npm, yarn or pnpm.

      - name: Build the app
        uses: tauri-apps/tauri-action@dev
        id: build-app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
            name: ${{matrix.platform}}
            path: |
              ${{ fromJSON(steps.build-app.outputs.artifactPaths)[0] }}
              ${{ fromJSON(steps.build-app.outputs.artifactPaths)[1] }}

  Linux:
    needs: [create_release, Tauri]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:      
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build server
        run: cargo build --manifest-path server/Cargo.toml --release
      - name: Build cli
        run: cargo build --manifest-path cli/Cargo.toml --release
      - name: Build watcher
        run: cargo build --manifest-path watcher/Cargo.toml --release
      
      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.os }}
          path: ./
      - name: Rename
        run: |
          mv deb/*.deb regard.deb
          mv appimage/*.AppImage regard.AppImage

      - name: Debug
        run: |
          ls
      - name: Package Binaries
        run: |
          mkdir -p release-linux-${{ matrix.os }}
          cp server/target/release/server release-linux-${{ matrix.os }}/
          cp cli/target/release/regard release-linux-${{ matrix.os }}/
          cp watcher/target/release/watcher release-linux-${{ matrix.os }}/
          cp regard.AppImage release-linux-${{matrix.os}}/
          cp regard.deb release-linux-${{matrix.os}}/
          cp setup-scripts/linux/install.sh setup-scripts/linux/openGUI.sh setup-scripts/linux/uninstall.sh release-linux-${{ matrix.os }}/
          zip -r release-linux-${{ matrix.os }}.zip release-linux-${{ matrix.os }}
      - name: Upload Binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Create_Release.outputs.upload_url }}
          asset_path: release-linux-${{ matrix.os }}.zip
          asset_name: release-linux-${{ matrix.os }}.zip
          asset_content_type: application/zip


  MacOS:
    needs: [create_release, Tauri]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    steps:      
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - run: rustup target add aarch64-apple-darwin
        if: matrix.os == 'macos-latest'

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.os }}
          path: ./

      - name: Rename
        run: |
          mv dmg/*.dmg regard.dmg
      - name: Debug

        run: |
          ls
      - name: Build server
        run: cargo build --manifest-path server/Cargo.toml --release
      - name: Build cli
        run: cargo build --manifest-path cli/Cargo.toml --release
      - name: Build watcher
        run: cargo build --manifest-path watcher/Cargo.toml --release
      - name: Package Binaries
        run: |
          mkdir -p release-macos-${{ matrix.os }}
          cp server/target/release/server release-macos-${{ matrix.os }}/
          cp cli/target/release/regard release-macos-${{ matrix.os }}/
          cp  regard.dmg release-macos-${{ matrix.os }}/
          cp watcher/target/release/watcher release-macos-${{ matrix.os }}/
          cp setup-scripts/macos/install.sh setup-scripts/macos/openGUI.sh setup-scripts/macos/uninstall.sh release-macos-${{matrix.os}}/
          zip -r release-macos-${{ matrix.os }}.zip release-macos-${{ matrix.os }}
      - name: Upload Binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Create_Release.outputs.upload_url }}
          asset_path: release-macos-${{ matrix.os }}.zip
          asset_name: release-macos-${{ matrix.os }}.zip
          asset_content_type: application/zip

  Windows:
    needs: [create_release, Tauri]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
    steps:      
      - name: Checkout
        uses: actions/checkout@v1
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.os }}
          path: ./
      - name: Build server
        run: cargo build --manifest-path server/Cargo.toml --release
      - name: Build cli
        run: cargo build --manifest-path cli/Cargo.toml --release
      - name: Build watcher
        run: cargo build --manifest-path watcher/Cargo.toml --release
      
      - name: Rename
        run: |
          mv *.msi regard.msi
      - name: Debug
        run: |
          ls server/target/release
      - name: Package Binaries
        run: |
          mkdir -p release-windows-${{ matrix.os }}
          cp server/target/release/server.exe release-windows-${{ matrix.os }}/
          cp cli/target/release/regard.exe release-windows-${{ matrix.os }}/
          cp watcher/target/release/watcher.exe release-windows-${{ matrix.os }}/
          cp  regard.msi release-windows-${{ matrix.os }}/
          Compress-Archive -Path release-windows-${{ matrix.os }} -DestinationPath release-windows-${{ matrix.os }}.zip
      - name: Upload Binaries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.Create_Release.outputs.upload_url }}
          asset_path: release-windows-${{ matrix.os }}.zip
          asset_name: release-windows-${{ matrix.os }}.zip
          asset_content_type: application/zip
